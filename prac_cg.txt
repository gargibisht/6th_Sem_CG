2D-Scaling

#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<dos.h>
#include<math.h>

#define pi 3.14285714

class transformations
{
double vertices[3][3];             
double t_matrix[3][3];             
double result[3][3];

public:
transformations(){};

void get_vertices();
void display_triangle();
void display_triangle_result();

void multiplication();
void copyback();

void rotation(double angle,double m,double n);
void reflection(double m,double c);
void scaling(double a,double d);
void shearing(double b,double c);

};

void transformations::get_vertices()
{
int i=0;

for(i=0;i<3;i++)
     {
	cout<<"\nEnter vertex "<<i+1<<":";
	cout<<"\nx1 : ";
	cin>>vertices[i][0];
	result[i][0]=vertices[i][0];

	cout<<"y1 : ";
	cin>>vertices[i][1];
	result[i][1]=vertices[i][1];

	vertices[i][2]=result[i][2]=1;
     }
}

void transformations::display_triangle()
{
int i=0;

for(i=0;i<2;i++)
     line(vertices[i][0],vertices[i][1],vertices[i+1][0],vertices[i+1][1]);
     line(vertices[i][0],vertices[i][1],vertices[0][0],vertices[0][1]);
}

void transformations::display_triangle_result()
{
int i=0;

for(i=0;i<2;i++)
     line(result[i][0],result[i][1],result[i+1][0],result[i+1][1]);
     line(result[i][0],result[i][1],result[0][0],result[0][1]);
}

void transformations::copyback()
{
int i=0,j=0;

for(i=0;i<3;i++)
for(j=0;j<3;j++)
result[i][j]=vertices[i][j];
}

void transformations::multiplication()
{
double r[3][3];
int i=0,j=0,k=0;

	for(i=0;i<3;i++)
	 {
	for(j=0;j<3;j++)
	     {
		r[i][j]=0;
		for(k=0;k<3;k++)
		r[i][j]+=result[i][k]*t_matrix[k][j];
	     }
	 }

for(i=0;i<3;i++)              
for(j=0;j<3;j++)
result[i][j]=r[i][j];
}


void transformations::scaling(double a,double d)
{
copyback();
cleardevice();

setcolor(RED);
display_triangle();
delay(20);
getch();

t_matrix[0][0]=a;                     
t_matrix[0][1]=0;
t_matrix[0][2]=0;
t_matrix[1][0]=0;
t_matrix[1][1]=d;
t_matrix[1][2]=0;
t_matrix[2][0]=0;
t_matrix[2][1]=0;
t_matrix[2][2]=1;

	multiplication();

setcolor(YELLOW);
display_triangle_result();
delay(20);
getch();
}


void main()
{
clrscr();
int gd=DETECT,gm,choice;
transformations t1;
char ch1,ch2;
double angle,m,n,slope,intercept,a,b,c,d;

do
    {
cout<<"\n\n\tTWO DIMENSIONAL TRANSFORMATIONS\n";
cout<<"\nEnter the details of a triangle(i.e. 2-D object)";
       t1.get_vertices();

	
	initgraph(&gd,&gm,"C:\\Turboc3\\BGI");
	cout<<"\n2D-Scaling";
	
	cout<<"\n..................";

			
			cout<<"\nEnter the factor of scaling...";
			cout<<"\nAlong the x-axis : ";
			cin>>a;
			cout<<"Along the y-axis : ";
			cin>>d;

			t1.scaling(a,d);
			break;

		
	closegraph();

	
cout<<"\n\nDo you want to try with a triangle with different dimensions(Y/N)? ";
cin>>ch1;

}while(ch1=='y' || ch1=='Y');
}





Scanlinefill


#include <conio.h>
#include <iostream.h>
#include <graphics.h>
#include <stdlib.h>
#include <dos.h>

class point
{
    public:
    int x,y;
};

point p[20];
int inter[20],x,y;
int v,xmin,ymin,xmax,ymax;
int c;

void read()
{
 cout<<"SCAN_FILL ALGORITHM";
 cout<<"\nEnter the no of vertices of polygon : ";
 cin>>v;
 cout<<"Enter the coordinates : \n "  ;

for(int i=0; i<v; i++) //ACCEPT THE VERTICES
	{
	    cout<<"x"<<(i+1)<<"=";
	    cin>>p[i].x;
	    cout<<"y"<<(i+1)<<"=";
	    cin>>p[i].y;
	}
	p[i].x=p[0].x;
	p[i].y=p[0].y;
	xmin=xmax=p[0].x;
	ymin=ymax=p[0].y;
}

void calcs()
{
    for(int i=0;i<v;i++)
    {
	if(xmin>p[i].x)
	xmin=p[i].x;
	if(xmax<p[i].x)
	xmax=p[i].x;
	if(ymin>p[i].y)
	ymin=p[i].y;
	if(ymax<p[i].y)
	ymax=p[i].y;
    }
}

void ints(float z) //DEFINE FUNCTION INTS
{
    int x1,x2,y1,y2,temp;
    c=0;
    for(int i=0;i<v;i++)
    {
	x1=p[i].x;
	y1=p[i].y;
	x2=p[i+1].x;
	y2=p[i+1].y;
	if(y2<y1)
	{
	    temp=x1;
	    x1=x2;
	    x2=temp;
	    temp=y1;
	    y1=y2;
	    y2=temp;
	}
	if(z<=y2&&z>=y1)
	{
	    if((y1-y2)==0)
	    x=x1;
	    else // used to make changes in x. so that we can fill our polygon after cerain distance
	    {
		x=((x2-x1)*(z-y1))/(y2-y1);
		x=x+x1;
	    }
	    if(x<=xmax && x>=xmin)
	    inter[c++]=x;
	}
    }
}

void sort(int z) //SORT FUNCTION
{
    int temp,j,i;

	for(i=0;i<v;i++)
	{
	    line(p[i].x,p[i].y,p[i+1].x,p[i+1].y); // used to make hollow outlines of a polygon
	}
	delay(100);
	 for(i=0; i<c;i+=2)
	{
	   delay(100);
	   line(inter[i],z,inter[i+1],z);  // Used to fill the polygon ....
	}
}

void display()
{
    float s,s2;
    s=ymin+0.01;
    cleardevice();
    while(s<=ymax)
       {
	ints(s);
	sort(s);
	s++;
       }
}

int main() //START OF MAIN
{
    int gd=DETECT,gm;
    initgraph(&gd,&gm,"C:\\TurboC3\\BGI");
    int cl;
    cout<<"\nEnter the colour u want:(0-15)->"; //Selecting colour
    cin>>cl;
    setcolor(cl);
    read();
    calcs();
    cleardevice();
    display();
    closegraph();
    getch();
    return 0;
}
